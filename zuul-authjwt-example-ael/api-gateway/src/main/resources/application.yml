spring.application.name: api-gateway

server:
  port: 9201

zuul:
  routes:
    auth-center:
      path: /login/**
      url: http://127.0.0.1:8081/
      sensitiveHeaders: Cookie,Set-Cookie
      stripPrefix: false
    auth-center1:
      path: /register/**
      url: http://127.0.0.1:8081/
      sensitiveHeaders: Cookie,Set-Cookie
      stripPrefix: false
    backend-service:
      path: /backend/**
      url: http://127.0.0.1:8082/
    microservice-commandes:
      path: /microservice-commandes/**
      url: http://127.0.0.1:9002/
    microservice-paiement:
      path: /microservice-paiement/**
      url: http://127.0.0.1:9003/ 
    auth-center2:
      path: /authenticate/**
      url: http://127.0.0.1:8081/
      sensitiveHeaders: Cookie,Set-Cookie
      stripPrefix: false
    microservice-produits:
      path: /microservice-produits/**
      url: http://127.0.0.1:9001/ 
      
#/authent2
ael.security.jwt.secret: otherpeopledontknowit
spring.datasource.driverClassName: com.mysql.jdbc.Driver
spring.datasource.url: jdbc:mysql://localhost/springbootdb?createDatabaseIfNotExist=true&autoReconnect=true&useSSL=false&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
spring.datasource.username: root
spring.datasource.password: ******
spring.datasource.platform: mysql
#If this was actually a production database, you do not tell Hibernate to use the create-drop option. This tells Hibernate to recreate the database on startup. Definitely not the behavior we want. You can set this property to the following values: none, validate, update, create-drop
spring.jpa.hibernate.ddl-auto: none #create-drop #none
spring.jpa.properties.hibernate.dialect: org.hibernate.dialect.MySQLDialect
